{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"onequant \u00b6 python package for quant trading and ai learning Documentation: https://xunzhimeng.github.io/onequant GitHub: https://github.com/xunzhimeng/onequant PyPI: https://pypi.org/project/onequant/ Free software: Apache-2.0 Features \u00b6 TODO Credits \u00b6 This package was created with Cookiecutter and the DarkDemiurg/cookiecutter-pypackage project template.","title":"Home"},{"location":"#onequant","text":"python package for quant trading and ai learning Documentation: https://xunzhimeng.github.io/onequant GitHub: https://github.com/xunzhimeng/onequant PyPI: https://pypi.org/project/onequant/ Free software: Apache-2.0","title":"onequant"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the DarkDemiurg/cookiecutter-pypackage project template.","title":"Credits"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.0] - 2023-04-19 \u00b6 Added \u00b6 First release on PyPI. [0.1.1] - 2023-05-06 \u00b6 Added \u00b6 Add api requests function to fetch the data from server. Add data wash function preprocess data for returns get from server. Add portfolios function filter data by corr or something else. \u00b6 [0.1.2] - 2024-02-22 \u00b6 Added/Fixed \u00b6 Add OQquotes object to fetch the data from server. Fixed OQtrades function. Add som indicators function for trading data.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#010-2023-04-19","text":"","title":"[0.1.0] - 2023-04-19"},{"location":"changelog/#added","text":"First release on PyPI.","title":"Added"},{"location":"changelog/#011-2023-05-06","text":"","title":"[0.1.1] - 2023-05-06"},{"location":"changelog/#added_1","text":"Add api requests function to fetch the data from server. Add data wash function preprocess data for returns get from server.","title":"Added"},{"location":"changelog/#add-portfolios-function-filter-data-by-corr-or-something-else","text":"","title":"Add portfolios function filter data by corr or something else."},{"location":"changelog/#012-2024-02-22","text":"","title":"[0.1.2] - 2024-02-22"},{"location":"changelog/#addedfixed","text":"Add OQquotes object to fetch the data from server. Fixed OQtrades function. Add som indicators function for trading data.","title":"Added/Fixed"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/xunzhimeng/onequant/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 onequant could always use more documentation, whether as part of the official onequant docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/xunzhimeng/onequant/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up onequant for local development. Fork the onequant repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/onequant.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/xunzhimeng/onequant/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_onequant.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/xunzhimeng/onequant/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"onequant could always use more documentation, whether as part of the official onequant docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/xunzhimeng/onequant/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up onequant for local development. Fork the onequant repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/onequant.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/xunzhimeng/onequant/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_onequant.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install onequant, run this command in your terminal: $ pip install onequant This is the preferred method to install onequant, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for onequant can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/xunzhimeng/onequant Or download the tarball : $ curl -OJL https://github.com/xunzhimeng/onequant/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install onequant, run this command in your terminal: $ pip install onequant This is the preferred method to install onequant, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for onequant can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/xunzhimeng/onequant Or download the tarball : $ curl -OJL https://github.com/xunzhimeng/onequant/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"onequant/","text":"Top-level package for onequant.","title":"Onequant"},{"location":"usage/","text":"Usage \u00b6 To use onequant in a project import onequant","title":"Usage"},{"location":"usage/#usage","text":"To use onequant in a project import onequant","title":"Usage"},{"location":"api/api_quotes/","text":"A class for interacting with OneQuant quotedatas. Source code in onequant/api/quotes.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 class OqQuotes : \"\"\"A class for interacting with OneQuant quotedatas.\"\"\" def __init__ ( self , wrapper = None ): \"\"\"Initializes an OqQuotes object. Args: wrapper (object, optional): An object containing the API and username. Defaults to None. \"\"\" self . api = wrapper . api self . username = wrapper . username def _query ( self , router , params = None ): \"\"\"Sends a GET request to the specified router with the given parameters. Args: router (str): The router to send the request to. params (dict, optional): The parameters to include in the request. Defaults to None. Returns: tuple: A tuple containing the data and code from the response. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) if result [ 'code' ] != 200 : raise Exception ( f 'An error occurred while retrieving tdegine data! code is { result [ \"code\" ] } ' ) return result [ 'data' ] @_pd def _query_pd ( self , params = None , router = None ): \"\"\"Sends a GET request and returns the data as a pandas DataFrame. Args: params (dict, optional): The parameters to include in the request. Defaults to None. router (str, optional): The router to send the request to. Defaults to None. Returns: pandas.DataFrame: The data from the response as a pandas DataFrame. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) return result [ 'data' ], result [ 'code' ] @_pd @_pagination def _query_pd_pg ( self , params = None , router = None ): \"\"\"Sends a GET request and returns the data as a paginated pandas DataFrame. Args: params (dict, optional): The parameters to include in the request. Defaults to None. router (str, optional): The router to send the request to. Defaults to None. Returns: dict: A dictionary containing the paginated data and metadata from the response. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) return result @_pd @tddata_2_list def _querytd_pd ( self , router , params = None ): \"\"\"Sends a GET request and returns the data as a pandas DataFrame. Args: router (str): The router to send the request to. params (dict, optional): The parameters to include in the request. Defaults to None. Returns: pandas.DataFrame: The data from the response as a pandas DataFrame. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) return result def realtime_quote ( self ): \"\"\"Returns realtime quote data. Returns: pandas.DataFrame: The realtime quote data. \"\"\" return self . _query_pd ( router = '/quote/future/realTime/quote' ) def realtime_quotes ( self ): \"\"\"Returns multiple realtime quote data. Returns: pandas.DataFrame: The multiple realtime quote data. \"\"\" return self . _query_pd ( router = '/quote/future/realTime/quotes' ) def future_bars ( self , code = None , interval = None , start_time = None , end_time = None , limit = None ): \"\"\"Fetches K-line (candlestick) data for futures. Args: code (str, optional): The code of the future to fetch data for. Defaults to None. interval (str, optional): The time interval for each K-line data point. Defaults to None. start (uint or str, optional): The start time for the data fetch. Can be a timestamp or a date string. end (uint or str, optional): The end time for the data fetch. Can be a timestamp or a date string. limit (int, optional): The maximum number of data points to fetch. Defaults to None.If set limit value,then start will discarded. Returns: pandas.DataFrame: The K-line data as a pandas DataFrame. \"\"\" if isinstance ( start_time , int ) and isinstance ( end_time , int ): params = { 'symbol' : code , 'interval' : interval , 'start' : start_time , 'end' : end_time , 'limit' : limit , } return self . _querytd_pd ( router = '/tvquote/kline_ascend' , params = params ) else : params = { 'symbol' : code , 'interval' : interval , 'start' : OqDateTime . string_to_ms_timestamp ( start_time ), 'end' : OqDateTime . string_to_ms_timestamp ( end_time ), 'limit' : limit , } return self . _querytd_pd ( router = '/tvquote/kline_ascend' , params = params ) def symbols ( self ): \"\"\"Returns symbols data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/symbol' , params = {}) def codeinfos ( self ): \"\"\"Returns code information data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/allCode' , params = {}) def indexes ( self ): \"\"\"Returns indexes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/indexCode' , params = {}) def option_codes ( self ): \"\"\"Returns option codes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/optionCode' , params = {}) def std_codes ( self ): \"\"\"Returns standard codes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/stdCode' , params = {}) __init__ ( wrapper = None ) \u00b6 Initializes an OqQuotes object. Parameters: Name Type Description Default wrapper object An object containing the API and username. Defaults to None. None Source code in onequant/api/quotes.py 9 10 11 12 13 14 15 16 def __init__ ( self , wrapper = None ): \"\"\"Initializes an OqQuotes object. Args: wrapper (object, optional): An object containing the API and username. Defaults to None. \"\"\" self . api = wrapper . api self . username = wrapper . username codeinfos () \u00b6 Returns code information data. Source code in onequant/api/quotes.py 130 131 132 def codeinfos ( self ): \"\"\"Returns code information data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/allCode' , params = {}) future_bars ( code = None , interval = None , start_time = None , end_time = None , limit = None ) \u00b6 Fetches K-line (candlestick) data for futures. Parameters: Name Type Description Default code str The code of the future to fetch data for. Defaults to None. None interval str The time interval for each K-line data point. Defaults to None. None start uint or str The start time for the data fetch. Can be a timestamp or a date string. required end uint or str The end time for the data fetch. Can be a timestamp or a date string. required limit int The maximum number of data points to fetch. Defaults to None.If set limit value,then None Returns: Type Description pandas.DataFrame: The K-line data as a pandas DataFrame. Source code in onequant/api/quotes.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 def future_bars ( self , code = None , interval = None , start_time = None , end_time = None , limit = None ): \"\"\"Fetches K-line (candlestick) data for futures. Args: code (str, optional): The code of the future to fetch data for. Defaults to None. interval (str, optional): The time interval for each K-line data point. Defaults to None. start (uint or str, optional): The start time for the data fetch. Can be a timestamp or a date string. end (uint or str, optional): The end time for the data fetch. Can be a timestamp or a date string. limit (int, optional): The maximum number of data points to fetch. Defaults to None.If set limit value,then start will discarded. Returns: pandas.DataFrame: The K-line data as a pandas DataFrame. \"\"\" if isinstance ( start_time , int ) and isinstance ( end_time , int ): params = { 'symbol' : code , 'interval' : interval , 'start' : start_time , 'end' : end_time , 'limit' : limit , } return self . _querytd_pd ( router = '/tvquote/kline_ascend' , params = params ) else : params = { 'symbol' : code , 'interval' : interval , 'start' : OqDateTime . string_to_ms_timestamp ( start_time ), 'end' : OqDateTime . string_to_ms_timestamp ( end_time ), 'limit' : limit , } return self . _querytd_pd ( router = '/tvquote/kline_ascend' , params = params ) indexes () \u00b6 Returns indexes data. Source code in onequant/api/quotes.py 134 135 136 def indexes ( self ): \"\"\"Returns indexes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/indexCode' , params = {}) option_codes () \u00b6 Returns option codes data. Source code in onequant/api/quotes.py 138 139 140 def option_codes ( self ): \"\"\"Returns option codes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/optionCode' , params = {}) realtime_quote () \u00b6 Returns realtime quote data. Returns: Type Description pandas.DataFrame: The realtime quote data. Source code in onequant/api/quotes.py 77 78 79 80 81 82 83 def realtime_quote ( self ): \"\"\"Returns realtime quote data. Returns: pandas.DataFrame: The realtime quote data. \"\"\" return self . _query_pd ( router = '/quote/future/realTime/quote' ) realtime_quotes () \u00b6 Returns multiple realtime quote data. Returns: Type Description pandas.DataFrame: The multiple realtime quote data. Source code in onequant/api/quotes.py 85 86 87 88 89 90 91 def realtime_quotes ( self ): \"\"\"Returns multiple realtime quote data. Returns: pandas.DataFrame: The multiple realtime quote data. \"\"\" return self . _query_pd ( router = '/quote/future/realTime/quotes' ) std_codes () \u00b6 Returns standard codes data. Source code in onequant/api/quotes.py 142 143 144 def std_codes ( self ): \"\"\"Returns standard codes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/stdCode' , params = {}) symbols () \u00b6 Returns symbols data. Source code in onequant/api/quotes.py 126 127 128 def symbols ( self ): \"\"\"Returns symbols data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/symbol' , params = {})","title":"Api quotes"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.__init__","text":"Initializes an OqQuotes object. Parameters: Name Type Description Default wrapper object An object containing the API and username. Defaults to None. None Source code in onequant/api/quotes.py 9 10 11 12 13 14 15 16 def __init__ ( self , wrapper = None ): \"\"\"Initializes an OqQuotes object. Args: wrapper (object, optional): An object containing the API and username. Defaults to None. \"\"\" self . api = wrapper . api self . username = wrapper . username","title":"__init__()"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.codeinfos","text":"Returns code information data. Source code in onequant/api/quotes.py 130 131 132 def codeinfos ( self ): \"\"\"Returns code information data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/allCode' , params = {})","title":"codeinfos()"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.future_bars","text":"Fetches K-line (candlestick) data for futures. Parameters: Name Type Description Default code str The code of the future to fetch data for. Defaults to None. None interval str The time interval for each K-line data point. Defaults to None. None start uint or str The start time for the data fetch. Can be a timestamp or a date string. required end uint or str The end time for the data fetch. Can be a timestamp or a date string. required limit int The maximum number of data points to fetch. Defaults to None.If set limit value,then None Returns: Type Description pandas.DataFrame: The K-line data as a pandas DataFrame. Source code in onequant/api/quotes.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 def future_bars ( self , code = None , interval = None , start_time = None , end_time = None , limit = None ): \"\"\"Fetches K-line (candlestick) data for futures. Args: code (str, optional): The code of the future to fetch data for. Defaults to None. interval (str, optional): The time interval for each K-line data point. Defaults to None. start (uint or str, optional): The start time for the data fetch. Can be a timestamp or a date string. end (uint or str, optional): The end time for the data fetch. Can be a timestamp or a date string. limit (int, optional): The maximum number of data points to fetch. Defaults to None.If set limit value,then start will discarded. Returns: pandas.DataFrame: The K-line data as a pandas DataFrame. \"\"\" if isinstance ( start_time , int ) and isinstance ( end_time , int ): params = { 'symbol' : code , 'interval' : interval , 'start' : start_time , 'end' : end_time , 'limit' : limit , } return self . _querytd_pd ( router = '/tvquote/kline_ascend' , params = params ) else : params = { 'symbol' : code , 'interval' : interval , 'start' : OqDateTime . string_to_ms_timestamp ( start_time ), 'end' : OqDateTime . string_to_ms_timestamp ( end_time ), 'limit' : limit , } return self . _querytd_pd ( router = '/tvquote/kline_ascend' , params = params )","title":"future_bars()"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.indexes","text":"Returns indexes data. Source code in onequant/api/quotes.py 134 135 136 def indexes ( self ): \"\"\"Returns indexes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/indexCode' , params = {})","title":"indexes()"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.option_codes","text":"Returns option codes data. Source code in onequant/api/quotes.py 138 139 140 def option_codes ( self ): \"\"\"Returns option codes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/optionCode' , params = {})","title":"option_codes()"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.realtime_quote","text":"Returns realtime quote data. Returns: Type Description pandas.DataFrame: The realtime quote data. Source code in onequant/api/quotes.py 77 78 79 80 81 82 83 def realtime_quote ( self ): \"\"\"Returns realtime quote data. Returns: pandas.DataFrame: The realtime quote data. \"\"\" return self . _query_pd ( router = '/quote/future/realTime/quote' )","title":"realtime_quote()"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.realtime_quotes","text":"Returns multiple realtime quote data. Returns: Type Description pandas.DataFrame: The multiple realtime quote data. Source code in onequant/api/quotes.py 85 86 87 88 89 90 91 def realtime_quotes ( self ): \"\"\"Returns multiple realtime quote data. Returns: pandas.DataFrame: The multiple realtime quote data. \"\"\" return self . _query_pd ( router = '/quote/future/realTime/quotes' )","title":"realtime_quotes()"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.std_codes","text":"Returns standard codes data. Source code in onequant/api/quotes.py 142 143 144 def std_codes ( self ): \"\"\"Returns standard codes data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/stdCode' , params = {})","title":"std_codes()"},{"location":"api/api_quotes/#onequant.api.quotes.OqQuotes.symbols","text":"Returns symbols data. Source code in onequant/api/quotes.py 126 127 128 def symbols ( self ): \"\"\"Returns symbols data.\"\"\" return self . _query_pd_pg ( router = '/quote/futureBase/symbol' , params = {})","title":"symbols()"},{"location":"api/api_request/","text":"Class for connecting to trading server. Basic function of fetching data from API server. Source code in onequant/api/request.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class ApiRequest : \"\"\"Class for connecting to trading server. Basic function of fetching data from API server. \"\"\" def __init__ ( self , url ): \"\"\"Initializes the ApiRequest class with a given url. Args: url (str): The url to be used for the API request. \"\"\" self . url = url self . token = None self . headers = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \\ (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" } def login ( self , username , password ): \"\"\"Logs in to the API with the given username and password. Args: username (str): The username to be used for the login. password (str): The password to be used for the login. Returns: str: The token for the logged in user. \"\"\" data = { 'username' : username , 'password' : password , 'autoLogin' : False , 'type' : 'pc' } response = requests . post ( url = self . url + '/system/login/login' , json = data , headers = self . headers ) if 'Set-Cookie' in response . headers : import re match = re . search ( r 'satoken=([\\w-]+);' , response . headers [ 'Set-Cookie' ]) if match : self . token = 'satoken=' + match . group ( 1 ) self . headers [ 'Cookie' ] = self . token return self . token def request ( self , method , router , params = None , data = None , json = None ): \"\"\"Sends a request to the API with the given parameters. Args: method (str): The HTTP method to be used for the request. router (str): The router to be used for the request. params (dict, optional): The parameters to be used for the request. Defaults to None. data (dict, optional): The data to be used for the request. Defaults to None. json (dict, optional): The json to be used for the request. Defaults to None. Raises: AssertionError: If an unsupported request method is used. Returns: dict: The response from the API in json format. \"\"\" assert method in [ 'get' , 'post' , 'put' , 'delete' ], 'Unsupported request method' response = requests . request ( method = method , url = self . url + router , params = params , data = data , json = json , headers = self . headers ) return response . json () __init__ ( url ) \u00b6 Initializes the ApiRequest class with a given url. Parameters: Name Type Description Default url str The url to be used for the API request. required Source code in onequant/api/request.py 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , url ): \"\"\"Initializes the ApiRequest class with a given url. Args: url (str): The url to be used for the API request. \"\"\" self . url = url self . token = None self . headers = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \\ (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" } login ( username , password ) \u00b6 Logs in to the API with the given username and password. Parameters: Name Type Description Default username str The username to be used for the login. required password str The password to be used for the login. required Returns: Name Type Description str The token for the logged in user. Source code in onequant/api/request.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def login ( self , username , password ): \"\"\"Logs in to the API with the given username and password. Args: username (str): The username to be used for the login. password (str): The password to be used for the login. Returns: str: The token for the logged in user. \"\"\" data = { 'username' : username , 'password' : password , 'autoLogin' : False , 'type' : 'pc' } response = requests . post ( url = self . url + '/system/login/login' , json = data , headers = self . headers ) if 'Set-Cookie' in response . headers : import re match = re . search ( r 'satoken=([\\w-]+);' , response . headers [ 'Set-Cookie' ]) if match : self . token = 'satoken=' + match . group ( 1 ) self . headers [ 'Cookie' ] = self . token return self . token request ( method , router , params = None , data = None , json = None ) \u00b6 Sends a request to the API with the given parameters. Parameters: Name Type Description Default method str The HTTP method to be used for the request. required router str The router to be used for the request. required params dict The parameters to be used for the request. Defaults to None. None data dict The data to be used for the request. Defaults to None. None json dict The json to be used for the request. Defaults to None. None Raises: Type Description AssertionError If an unsupported request method is used. Returns: Name Type Description dict The response from the API in json format. Source code in onequant/api/request.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def request ( self , method , router , params = None , data = None , json = None ): \"\"\"Sends a request to the API with the given parameters. Args: method (str): The HTTP method to be used for the request. router (str): The router to be used for the request. params (dict, optional): The parameters to be used for the request. Defaults to None. data (dict, optional): The data to be used for the request. Defaults to None. json (dict, optional): The json to be used for the request. Defaults to None. Raises: AssertionError: If an unsupported request method is used. Returns: dict: The response from the API in json format. \"\"\" assert method in [ 'get' , 'post' , 'put' , 'delete' ], 'Unsupported request method' response = requests . request ( method = method , url = self . url + router , params = params , data = data , json = json , headers = self . headers ) return response . json ()","title":"Api request"},{"location":"api/api_request/#onequant.api.request.ApiRequest.__init__","text":"Initializes the ApiRequest class with a given url. Parameters: Name Type Description Default url str The url to be used for the API request. required Source code in onequant/api/request.py 14 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , url ): \"\"\"Initializes the ApiRequest class with a given url. Args: url (str): The url to be used for the API request. \"\"\" self . url = url self . token = None self . headers = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \\ (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" }","title":"__init__()"},{"location":"api/api_request/#onequant.api.request.ApiRequest.login","text":"Logs in to the API with the given username and password. Parameters: Name Type Description Default username str The username to be used for the login. required password str The password to be used for the login. required Returns: Name Type Description str The token for the logged in user. Source code in onequant/api/request.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def login ( self , username , password ): \"\"\"Logs in to the API with the given username and password. Args: username (str): The username to be used for the login. password (str): The password to be used for the login. Returns: str: The token for the logged in user. \"\"\" data = { 'username' : username , 'password' : password , 'autoLogin' : False , 'type' : 'pc' } response = requests . post ( url = self . url + '/system/login/login' , json = data , headers = self . headers ) if 'Set-Cookie' in response . headers : import re match = re . search ( r 'satoken=([\\w-]+);' , response . headers [ 'Set-Cookie' ]) if match : self . token = 'satoken=' + match . group ( 1 ) self . headers [ 'Cookie' ] = self . token return self . token","title":"login()"},{"location":"api/api_request/#onequant.api.request.ApiRequest.request","text":"Sends a request to the API with the given parameters. Parameters: Name Type Description Default method str The HTTP method to be used for the request. required router str The router to be used for the request. required params dict The parameters to be used for the request. Defaults to None. None data dict The data to be used for the request. Defaults to None. None json dict The json to be used for the request. Defaults to None. None Raises: Type Description AssertionError If an unsupported request method is used. Returns: Name Type Description dict The response from the API in json format. Source code in onequant/api/request.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def request ( self , method , router , params = None , data = None , json = None ): \"\"\"Sends a request to the API with the given parameters. Args: method (str): The HTTP method to be used for the request. router (str): The router to be used for the request. params (dict, optional): The parameters to be used for the request. Defaults to None. data (dict, optional): The data to be used for the request. Defaults to None. json (dict, optional): The json to be used for the request. Defaults to None. Raises: AssertionError: If an unsupported request method is used. Returns: dict: The response from the API in json format. \"\"\" assert method in [ 'get' , 'post' , 'put' , 'delete' ], 'Unsupported request method' response = requests . request ( method = method , url = self . url + router , params = params , data = data , json = json , headers = self . headers ) return response . json ()","title":"request()"},{"location":"api/api_strategies/","text":"A class for interacting with OneQuant strategies. Source code in onequant/api/strategies.pyclass OqStrategies : \"\"\"A class for interacting with OneQuant strategies.\"\"\" def __init__ ( self , wrapper = None ): \"\"\"Initializes an OqStrategies object. Args: wrapper (object, optional): An object containing the API and username. Defaults to None. \"\"\" self . api = wrapper . api self . username = wrapper . username def _query ( self , router , params = None ): \"\"\"Sends a GET request to the specified router with the given parameters. Args: router (str): The router to send the request to. params (dict, optional): The parameters to include in the request. Defaults to None. Returns: tuple: A tuple containing the data and code from the response. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) if result [ 'code' ] != 200 : raise Exception ( f 'An error occurred while retrieving tdegine data! code is { result [ \"code\" ] } ' ) return result [ 'data' ] @_pd def _query_pd ( self , params = None , router = None ): \"\"\"Sends a GET request and returns the data as a pandas DataFrame. Args: params (dict, optional): The parameters to include in the request. Defaults to None. router (str, optional): The router to send the request to. Defaults to None. Returns: pandas.DataFrame: The data from the response as a pandas DataFrame. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) return result [ 'data' ], result [ 'code' ] @_pd @_pagination def _query_pd_pg ( self , params = None , router = None ): \"\"\"Sends a GET request and returns the data as a paginated pandas DataFrame. Args: params (dict, optional): The parameters to include in the request. Defaults to None. router (str, optional): The router to send the request to. Defaults to None. Returns: dict: A dictionary containing the paginated data and metadata from the response. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) return result @_pd @tddata_2_list def _querytd_pd ( self , router , params = None ): \"\"\"Sends a GET request and returns the data as a pandas DataFrame. Args: router (str): The router to send the request to. params (dict, optional): The parameters to include in the request. Defaults to None. Returns: pandas.DataFrame: The data from the response as a pandas DataFrame. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) return result def strategy_base ( self ): \"\"\"Returns the base information for all strategies. Returns: pandas.DataFrame: The base information for all strategies. \"\"\" return self . _query_pd ( router = '/strategy/info/base/query' ) def strategy_list ( self , base_ea = None , base_tf = None , is_running = None , mark = None , min_tf = None ): \"\"\"Returns a paginated list of strategies that match the specified criteria. Args: base_ea (str, optional): The base EA to filter by. Defaults to None. base_tf (str, optional): The base time frame to filter by. Defaults to None. is_running (bool, optional): Whether the strategy is currently running. Defaults to None. mark (int, optional): The mark index to filter by. Defaults to None. Returns: dict: A dictionary containing the paginated list of strategies and metadata. \"\"\" params = { 'base_ea' : base_ea , 'base_tf' : base_tf , 'is_running' : is_running , 'mark_index' : mark , 'min_tf' : min_tf , } return self . _query_pd ( router = '/strategy/info/querypro' , params = params ) def strategy_report ( self , strategy = None , base_ea = None , test_codes = None , base_tf = None , min_tf = None , min_netvalue = None , min_sharpe = None , min_annual_returns = None , min_calmar = None , min_sortino = None , max_margin = None , min_tradetimes = None , is_running = None , ): \"\"\"Returns a paginated report of the specified strategy. Args: strategy (str, optional): The strategy to retrieve the report for. Defaults to None. base_ea (str, optional): The base EA to filter by. Defaults to None. test_codes (str, optional): The test codes to filter by. Defaults to None. base_tf (str, optional): The base time frame to filter by. Defaults to None. Returns: dict: A dictionary containing the paginated report and metadata. \"\"\" params = { 'strategy' : strategy , 'base_ea' : base_ea , 'base_tf' : base_tf , 'test_codes' : test_codes , 'min_tf' : min_tf , 'min_netvalue' : min_netvalue , 'min_sharpe' : min_sharpe , 'min_annual_returns' : min_annual_returns , 'min_calmar' : min_calmar , 'min_sortino' : min_sortino , 'max_margin' : max_margin , 'min_tradetimes' : min_tradetimes , 'status' : - 1 if is_running is None else ( 1 if is_running else 0 ), } return self . _query_pd ( router = '/strategy/analyse/report/querypro' , params = params ) def strategy_netvalue ( self , strategy_id = None ): \"\"\"Returns the net value for the specified strategy. Args: strategy_id (str, optional): The ID of the strategy to retrieve the net value for. Defaults to None. Returns: pandas.DataFrame: The net value for the specified strategy. \"\"\" params = { 'strategy_id' : strategy_id } return self . _querytd_pd ( router = '/strategy/analyse/netequity/query' , params = params ) def strategy_record ( self , strategy_id = None ): \"\"\"Returns the record for the specified strategy. Args: strategy_id (str, optional): The ID of the strategy to retrieve the record for. Defaults to None. Returns: pandas.DataFrame: The record for the specified strategy. \"\"\" params = { 'strategy_id' : strategy_id } return self . _querytd_pd ( router = '/strateg/analyse/record/query' , params = params ) __init__ ( wrapper = None ) \u00b6 Initializes an OqStrategies object. Parameters: Name Type Description Default wrapper object An object containing the API and username. Defaults to None. None Source code in onequant/api/strategies.py 8 9 10 11 12 13 14 15 def __init__ ( self , wrapper = None ): \"\"\"Initializes an OqStrategies object. Args: wrapper (object, optional): An object containing the API and username. Defaults to None. \"\"\" self . api = wrapper . api self . username = wrapper . username strategy_base () \u00b6 Returns the base information for all strategies. Returns: Type Description pandas.DataFrame: The base information for all strategies. Source code in onequant/api/strategies.py 76 77 78 79 80 81 82 def strategy_base ( self ): \"\"\"Returns the base information for all strategies. Returns: pandas.DataFrame: The base information for all strategies. \"\"\" return self . _query_pd ( router = '/strategy/info/base/query' ) strategy_list ( base_ea = None , base_tf = None , is_running = None , mark = None , min_tf = None ) \u00b6 Returns a paginated list of strategies that match the specified criteria. Parameters: Name Type Description Default base_ea str The base EA to filter by. Defaults to None. None base_tf str The base time frame to filter by. Defaults to None. None is_running bool Whether the strategy is currently running. Defaults to None. None mark int The mark index to filter by. Defaults to None. None Returns: Name Type Description dict A dictionary containing the paginated list of strategies and metadata. Source code in onequant/api/strategies.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def strategy_list ( self , base_ea = None , base_tf = None , is_running = None , mark = None , min_tf = None ): \"\"\"Returns a paginated list of strategies that match the specified criteria. Args: base_ea (str, optional): The base EA to filter by. Defaults to None. base_tf (str, optional): The base time frame to filter by. Defaults to None. is_running (bool, optional): Whether the strategy is currently running. Defaults to None. mark (int, optional): The mark index to filter by. Defaults to None. Returns: dict: A dictionary containing the paginated list of strategies and metadata. \"\"\" params = { 'base_ea' : base_ea , 'base_tf' : base_tf , 'is_running' : is_running , 'mark_index' : mark , 'min_tf' : min_tf , } return self . _query_pd ( router = '/strategy/info/querypro' , params = params ) strategy_netvalue ( strategy_id = None ) \u00b6 Returns the net value for the specified strategy. Parameters: Name Type Description Default strategy_id str The ID of the strategy to retrieve the net value for. Defaults to None. None Returns: Type Description pandas.DataFrame: The net value for the specified strategy. Source code in onequant/api/strategies.py 149 150 151 152 153 154 155 156 157 158 159 def strategy_netvalue ( self , strategy_id = None ): \"\"\"Returns the net value for the specified strategy. Args: strategy_id (str, optional): The ID of the strategy to retrieve the net value for. Defaults to None. Returns: pandas.DataFrame: The net value for the specified strategy. \"\"\" params = { 'strategy_id' : strategy_id } return self . _querytd_pd ( router = '/strategy/analyse/netequity/query' , params = params ) strategy_record ( strategy_id = None ) \u00b6 Returns the record for the specified strategy. Parameters: Name Type Description Default strategy_id str The ID of the strategy to retrieve the record for. Defaults to None. None Returns: Type Description pandas.DataFrame: The record for the specified strategy. Source code in onequant/api/strategies.py 161 162 163 164 165 166 167 168 169 170 171 def strategy_record ( self , strategy_id = None ): \"\"\"Returns the record for the specified strategy. Args: strategy_id (str, optional): The ID of the strategy to retrieve the record for. Defaults to None. Returns: pandas.DataFrame: The record for the specified strategy. \"\"\" params = { 'strategy_id' : strategy_id } return self . _querytd_pd ( router = '/strateg/analyse/record/query' , params = params ) strategy_report ( strategy = None , base_ea = None , test_codes = None , base_tf = None , min_tf = None , min_netvalue = None , min_sharpe = None , min_annual_returns = None , min_calmar = None , min_sortino = None , max_margin = None , min_tradetimes = None , is_running = None ) \u00b6 Returns a paginated report of the specified strategy. Parameters: Name Type Description Default strategy str The strategy to retrieve the report for. Defaults to None. None base_ea str The base EA to filter by. Defaults to None. None test_codes str The test codes to filter by. Defaults to None. None base_tf str The base time frame to filter by. Defaults to None. None Returns: Name Type Description dict A dictionary containing the paginated report and metadata. Source code in onequant/api/strategies.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def strategy_report ( self , strategy = None , base_ea = None , test_codes = None , base_tf = None , min_tf = None , min_netvalue = None , min_sharpe = None , min_annual_returns = None , min_calmar = None , min_sortino = None , max_margin = None , min_tradetimes = None , is_running = None , ): \"\"\"Returns a paginated report of the specified strategy. Args: strategy (str, optional): The strategy to retrieve the report for. Defaults to None. base_ea (str, optional): The base EA to filter by. Defaults to None. test_codes (str, optional): The test codes to filter by. Defaults to None. base_tf (str, optional): The base time frame to filter by. Defaults to None. Returns: dict: A dictionary containing the paginated report and metadata. \"\"\" params = { 'strategy' : strategy , 'base_ea' : base_ea , 'base_tf' : base_tf , 'test_codes' : test_codes , 'min_tf' : min_tf , 'min_netvalue' : min_netvalue , 'min_sharpe' : min_sharpe , 'min_annual_returns' : min_annual_returns , 'min_calmar' : min_calmar , 'min_sortino' : min_sortino , 'max_margin' : max_margin , 'min_tradetimes' : min_tradetimes , 'status' : - 1 if is_running is None else ( 1 if is_running else 0 ), } return self . _query_pd ( router = '/strategy/analyse/report/querypro' , params = params )","title":"Api strategies"},{"location":"api/api_strategies/#onequant.api.strategies.OqStrategies.__init__","text":"Initializes an OqStrategies object. Parameters: Name Type Description Default wrapper object An object containing the API and username. Defaults to None. None Source code in onequant/api/strategies.py 8 9 10 11 12 13 14 15 def __init__ ( self , wrapper = None ): \"\"\"Initializes an OqStrategies object. Args: wrapper (object, optional): An object containing the API and username. Defaults to None. \"\"\" self . api = wrapper . api self . username = wrapper . username","title":"__init__()"},{"location":"api/api_strategies/#onequant.api.strategies.OqStrategies.strategy_base","text":"Returns the base information for all strategies. Returns: Type Description pandas.DataFrame: The base information for all strategies. Source code in onequant/api/strategies.py 76 77 78 79 80 81 82 def strategy_base ( self ): \"\"\"Returns the base information for all strategies. Returns: pandas.DataFrame: The base information for all strategies. \"\"\" return self . _query_pd ( router = '/strategy/info/base/query' )","title":"strategy_base()"},{"location":"api/api_strategies/#onequant.api.strategies.OqStrategies.strategy_list","text":"Returns a paginated list of strategies that match the specified criteria. Parameters: Name Type Description Default base_ea str The base EA to filter by. Defaults to None. None base_tf str The base time frame to filter by. Defaults to None. None is_running bool Whether the strategy is currently running. Defaults to None. None mark int The mark index to filter by. Defaults to None. None Returns: Name Type Description dict A dictionary containing the paginated list of strategies and metadata. Source code in onequant/api/strategies.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def strategy_list ( self , base_ea = None , base_tf = None , is_running = None , mark = None , min_tf = None ): \"\"\"Returns a paginated list of strategies that match the specified criteria. Args: base_ea (str, optional): The base EA to filter by. Defaults to None. base_tf (str, optional): The base time frame to filter by. Defaults to None. is_running (bool, optional): Whether the strategy is currently running. Defaults to None. mark (int, optional): The mark index to filter by. Defaults to None. Returns: dict: A dictionary containing the paginated list of strategies and metadata. \"\"\" params = { 'base_ea' : base_ea , 'base_tf' : base_tf , 'is_running' : is_running , 'mark_index' : mark , 'min_tf' : min_tf , } return self . _query_pd ( router = '/strategy/info/querypro' , params = params )","title":"strategy_list()"},{"location":"api/api_strategies/#onequant.api.strategies.OqStrategies.strategy_netvalue","text":"Returns the net value for the specified strategy. Parameters: Name Type Description Default strategy_id str The ID of the strategy to retrieve the net value for. Defaults to None. None Returns: Type Description pandas.DataFrame: The net value for the specified strategy. Source code in onequant/api/strategies.py 149 150 151 152 153 154 155 156 157 158 159 def strategy_netvalue ( self , strategy_id = None ): \"\"\"Returns the net value for the specified strategy. Args: strategy_id (str, optional): The ID of the strategy to retrieve the net value for. Defaults to None. Returns: pandas.DataFrame: The net value for the specified strategy. \"\"\" params = { 'strategy_id' : strategy_id } return self . _querytd_pd ( router = '/strategy/analyse/netequity/query' , params = params )","title":"strategy_netvalue()"},{"location":"api/api_strategies/#onequant.api.strategies.OqStrategies.strategy_record","text":"Returns the record for the specified strategy. Parameters: Name Type Description Default strategy_id str The ID of the strategy to retrieve the record for. Defaults to None. None Returns: Type Description pandas.DataFrame: The record for the specified strategy. Source code in onequant/api/strategies.py 161 162 163 164 165 166 167 168 169 170 171 def strategy_record ( self , strategy_id = None ): \"\"\"Returns the record for the specified strategy. Args: strategy_id (str, optional): The ID of the strategy to retrieve the record for. Defaults to None. Returns: pandas.DataFrame: The record for the specified strategy. \"\"\" params = { 'strategy_id' : strategy_id } return self . _querytd_pd ( router = '/strateg/analyse/record/query' , params = params )","title":"strategy_record()"},{"location":"api/api_strategies/#onequant.api.strategies.OqStrategies.strategy_report","text":"Returns a paginated report of the specified strategy. Parameters: Name Type Description Default strategy str The strategy to retrieve the report for. Defaults to None. None base_ea str The base EA to filter by. Defaults to None. None test_codes str The test codes to filter by. Defaults to None. None base_tf str The base time frame to filter by. Defaults to None. None Returns: Name Type Description dict A dictionary containing the paginated report and metadata. Source code in onequant/api/strategies.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def strategy_report ( self , strategy = None , base_ea = None , test_codes = None , base_tf = None , min_tf = None , min_netvalue = None , min_sharpe = None , min_annual_returns = None , min_calmar = None , min_sortino = None , max_margin = None , min_tradetimes = None , is_running = None , ): \"\"\"Returns a paginated report of the specified strategy. Args: strategy (str, optional): The strategy to retrieve the report for. Defaults to None. base_ea (str, optional): The base EA to filter by. Defaults to None. test_codes (str, optional): The test codes to filter by. Defaults to None. base_tf (str, optional): The base time frame to filter by. Defaults to None. Returns: dict: A dictionary containing the paginated report and metadata. \"\"\" params = { 'strategy' : strategy , 'base_ea' : base_ea , 'base_tf' : base_tf , 'test_codes' : test_codes , 'min_tf' : min_tf , 'min_netvalue' : min_netvalue , 'min_sharpe' : min_sharpe , 'min_annual_returns' : min_annual_returns , 'min_calmar' : min_calmar , 'min_sortino' : min_sortino , 'max_margin' : max_margin , 'min_tradetimes' : min_tradetimes , 'status' : - 1 if is_running is None else ( 1 if is_running else 0 ), } return self . _query_pd ( router = '/strategy/analyse/report/querypro' , params = params )","title":"strategy_report()"},{"location":"api/api_trades/","text":"Api for get trades information from server. Source code in onequant/api/trades.pyclass OqTrades : \"\"\"Api for get trades information from server.\"\"\" def __init__ ( self , wrapper = None ): \"\"\"Initializes the OqTrades class. Args: wrapper: An object that wraps the OneQuant API. Returns: None. \"\"\" self . api = wrapper . api self . username = wrapper . username def _query ( self , router = None , params = None ): \"\"\"Sends a GET request to the OneQuant API. Args: router: The router for the request. params: The parameters for the request. Returns: A tuple containing the data and code from the request. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) if result [ 'code' ] != 200 : raise Exception ( f 'An error occurred while retrieving tdegine data! code is { result [ \"code\" ] } ' ) return result [ 'data' ] @_pd def _query_pd ( self , router = None , params = None ): \"\"\"Sends a GET request to the OneQuant API and returns the data as a pandas DataFrame. Args: router: The router for the request. params: The parameters for the request. Returns: A pandas DataFrame containing the data from the request. \"\"\" result = self . api . request ( method = 'get' , router = router , params = params ) return result [ 'data' ], result [ 'code' ] def account ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve account information. Args: None. Returns: A tuple containing the data and code from the request. \"\"\" params = { 'acc_type' : 0 } return self . _query ( '/trade/account/query' , params ) def account_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual account information. Args: None. Returns: A tuple containing the data and code from the request. \"\"\" params = { 'acc_type' : 1 } return self . _query ( '/trade/account/query' , params ) def position ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve position information. Args: None. Returns: A pandas DataFrame containing the position data from the request. \"\"\" params = { 'acc_type' : 0 } return self . _query_pd ( '/trade/position/query' , params ) def position_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual position information. Args: None. Returns: A pandas DataFrame containing the virtual position data from the request. \"\"\" params = { 'acc_type' : 1 } return self . _query_pd ( '/trade/position/query' , params ) def orders ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve order information. Args: None. Returns: A pandas DataFrame containing the order data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/order/query' , params ) def orders_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual order information. Args: None. Returns: A pandas DataFrame containing the virtual order data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/order/query' , params ) def unfill_orders ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve unfulfilled order information. Args: None. Returns: A pandas DataFrame containing the unfulfilled order data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/order/restore/query' , params ) def unfill_orders_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual unfulfilled order information. Args: None. Returns: A pandas DataFrame containing the virtual unfulfilled order data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/order/restore/query' , params ) def rsptrades ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve real-time settlement trade information. Args: None. Returns: A pandas DataFrame containing the real-time settlement trade data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/rsptrade/query' , params ) def rsptrades_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual real-time settlement trade information. Args: None. Returns: A pandas DataFrame containing the virtual real-time settlement trade data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/rsptrade/query' , params ) def workers ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve worker information. Args: None. Returns: A pandas DataFrame containing the worker data from the request. \"\"\" return self . _query_pd ( '/trade/worker/query' ) def conditions ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve condition information. Args: None. Returns: A pandas DataFrame containing the condition data from the request. \"\"\" return self . _query_pd ( '/trade/condition/query' ) def acc_follow ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve account follow information. Args: None. Returns: A pandas DataFrame containing the account follow data from the request. \"\"\" params = { 'user' : self . username } return self . _query_pd ( '/trade/accFollow/query' , params ) __init__ ( wrapper = None ) \u00b6 Initializes the OqTrades class. Parameters: Name Type Description Default wrapper An object that wraps the OneQuant API. None Returns: Type Description None. Source code in onequant/api/trades.py 8 9 10 11 12 13 14 15 16 17 18 def __init__ ( self , wrapper = None ): \"\"\"Initializes the OqTrades class. Args: wrapper: An object that wraps the OneQuant API. Returns: None. \"\"\" self . api = wrapper . api self . username = wrapper . username acc_follow () \u00b6 Sends a GET request to the OneQuant API to retrieve account follow information. Returns: Type Description A pandas DataFrame containing the account follow data from the request. Source code in onequant/api/trades.py 191 192 193 194 195 196 197 198 199 200 201 def acc_follow ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve account follow information. Args: None. Returns: A pandas DataFrame containing the account follow data from the request. \"\"\" params = { 'user' : self . username } return self . _query_pd ( '/trade/accFollow/query' , params ) account () \u00b6 Sends a GET request to the OneQuant API to retrieve account information. Returns: Type Description A tuple containing the data and code from the request. Source code in onequant/api/trades.py 49 50 51 52 53 54 55 56 57 58 59 def account ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve account information. Args: None. Returns: A tuple containing the data and code from the request. \"\"\" params = { 'acc_type' : 0 } return self . _query ( '/trade/account/query' , params ) account_virtual () \u00b6 Sends a GET request to the OneQuant API to retrieve virtual account information. Returns: Type Description A tuple containing the data and code from the request. Source code in onequant/api/trades.py 61 62 63 64 65 66 67 68 69 70 71 def account_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual account information. Args: None. Returns: A tuple containing the data and code from the request. \"\"\" params = { 'acc_type' : 1 } return self . _query ( '/trade/account/query' , params ) conditions () \u00b6 Sends a GET request to the OneQuant API to retrieve condition information. Returns: Type Description A pandas DataFrame containing the condition data from the request. Source code in onequant/api/trades.py 180 181 182 183 184 185 186 187 188 189 def conditions ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve condition information. Args: None. Returns: A pandas DataFrame containing the condition data from the request. \"\"\" return self . _query_pd ( '/trade/condition/query' ) orders () \u00b6 Sends a GET request to the OneQuant API to retrieve order information. Returns: Type Description A pandas DataFrame containing the order data from the request. Source code in onequant/api/trades.py 97 98 99 100 101 102 103 104 105 106 107 def orders ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve order information. Args: None. Returns: A pandas DataFrame containing the order data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/order/query' , params ) orders_virtual () \u00b6 Sends a GET request to the OneQuant API to retrieve virtual order information. Returns: Type Description A pandas DataFrame containing the virtual order data from the request. Source code in onequant/api/trades.py 109 110 111 112 113 114 115 116 117 118 119 def orders_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual order information. Args: None. Returns: A pandas DataFrame containing the virtual order data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/order/query' , params ) position () \u00b6 Sends a GET request to the OneQuant API to retrieve position information. Returns: Type Description A pandas DataFrame containing the position data from the request. Source code in onequant/api/trades.py 73 74 75 76 77 78 79 80 81 82 83 def position ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve position information. Args: None. Returns: A pandas DataFrame containing the position data from the request. \"\"\" params = { 'acc_type' : 0 } return self . _query_pd ( '/trade/position/query' , params ) position_virtual () \u00b6 Sends a GET request to the OneQuant API to retrieve virtual position information. Returns: Type Description A pandas DataFrame containing the virtual position data from the request. Source code in onequant/api/trades.py 85 86 87 88 89 90 91 92 93 94 95 def position_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual position information. Args: None. Returns: A pandas DataFrame containing the virtual position data from the request. \"\"\" params = { 'acc_type' : 1 } return self . _query_pd ( '/trade/position/query' , params ) rsptrades () \u00b6 Sends a GET request to the OneQuant API to retrieve real-time settlement trade information. Returns: Type Description A pandas DataFrame containing the real-time settlement trade data from the request. Source code in onequant/api/trades.py 145 146 147 148 149 150 151 152 153 154 155 def rsptrades ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve real-time settlement trade information. Args: None. Returns: A pandas DataFrame containing the real-time settlement trade data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/rsptrade/query' , params ) rsptrades_virtual () \u00b6 Sends a GET request to the OneQuant API to retrieve virtual real-time settlement trade information. Returns: Type Description A pandas DataFrame containing the virtual real-time settlement trade data from the request. Source code in onequant/api/trades.py 157 158 159 160 161 162 163 164 165 166 167 def rsptrades_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual real-time settlement trade information. Args: None. Returns: A pandas DataFrame containing the virtual real-time settlement trade data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/rsptrade/query' , params ) unfill_orders () \u00b6 Sends a GET request to the OneQuant API to retrieve unfulfilled order information. Returns: Type Description A pandas DataFrame containing the unfulfilled order data from the request. Source code in onequant/api/trades.py 121 122 123 124 125 126 127 128 129 130 131 def unfill_orders ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve unfulfilled order information. Args: None. Returns: A pandas DataFrame containing the unfulfilled order data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/order/restore/query' , params ) unfill_orders_virtual () \u00b6 Sends a GET request to the OneQuant API to retrieve virtual unfulfilled order information. Returns: Type Description A pandas DataFrame containing the virtual unfulfilled order data from the request. Source code in onequant/api/trades.py 133 134 135 136 137 138 139 140 141 142 143 def unfill_orders_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual unfulfilled order information. Args: None. Returns: A pandas DataFrame containing the virtual unfulfilled order data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/order/restore/query' , params ) workers () \u00b6 Sends a GET request to the OneQuant API to retrieve worker information. Returns: Type Description A pandas DataFrame containing the worker data from the request. Source code in onequant/api/trades.py 169 170 171 172 173 174 175 176 177 178 def workers ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve worker information. Args: None. Returns: A pandas DataFrame containing the worker data from the request. \"\"\" return self . _query_pd ( '/trade/worker/query' )","title":"Api trades"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.__init__","text":"Initializes the OqTrades class. Parameters: Name Type Description Default wrapper An object that wraps the OneQuant API. None Returns: Type Description None. Source code in onequant/api/trades.py 8 9 10 11 12 13 14 15 16 17 18 def __init__ ( self , wrapper = None ): \"\"\"Initializes the OqTrades class. Args: wrapper: An object that wraps the OneQuant API. Returns: None. \"\"\" self . api = wrapper . api self . username = wrapper . username","title":"__init__()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.acc_follow","text":"Sends a GET request to the OneQuant API to retrieve account follow information. Returns: Type Description A pandas DataFrame containing the account follow data from the request. Source code in onequant/api/trades.py 191 192 193 194 195 196 197 198 199 200 201 def acc_follow ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve account follow information. Args: None. Returns: A pandas DataFrame containing the account follow data from the request. \"\"\" params = { 'user' : self . username } return self . _query_pd ( '/trade/accFollow/query' , params )","title":"acc_follow()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.account","text":"Sends a GET request to the OneQuant API to retrieve account information. Returns: Type Description A tuple containing the data and code from the request. Source code in onequant/api/trades.py 49 50 51 52 53 54 55 56 57 58 59 def account ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve account information. Args: None. Returns: A tuple containing the data and code from the request. \"\"\" params = { 'acc_type' : 0 } return self . _query ( '/trade/account/query' , params )","title":"account()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.account_virtual","text":"Sends a GET request to the OneQuant API to retrieve virtual account information. Returns: Type Description A tuple containing the data and code from the request. Source code in onequant/api/trades.py 61 62 63 64 65 66 67 68 69 70 71 def account_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual account information. Args: None. Returns: A tuple containing the data and code from the request. \"\"\" params = { 'acc_type' : 1 } return self . _query ( '/trade/account/query' , params )","title":"account_virtual()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.conditions","text":"Sends a GET request to the OneQuant API to retrieve condition information. Returns: Type Description A pandas DataFrame containing the condition data from the request. Source code in onequant/api/trades.py 180 181 182 183 184 185 186 187 188 189 def conditions ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve condition information. Args: None. Returns: A pandas DataFrame containing the condition data from the request. \"\"\" return self . _query_pd ( '/trade/condition/query' )","title":"conditions()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.orders","text":"Sends a GET request to the OneQuant API to retrieve order information. Returns: Type Description A pandas DataFrame containing the order data from the request. Source code in onequant/api/trades.py 97 98 99 100 101 102 103 104 105 106 107 def orders ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve order information. Args: None. Returns: A pandas DataFrame containing the order data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/order/query' , params )","title":"orders()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.orders_virtual","text":"Sends a GET request to the OneQuant API to retrieve virtual order information. Returns: Type Description A pandas DataFrame containing the virtual order data from the request. Source code in onequant/api/trades.py 109 110 111 112 113 114 115 116 117 118 119 def orders_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual order information. Args: None. Returns: A pandas DataFrame containing the virtual order data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/order/query' , params )","title":"orders_virtual()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.position","text":"Sends a GET request to the OneQuant API to retrieve position information. Returns: Type Description A pandas DataFrame containing the position data from the request. Source code in onequant/api/trades.py 73 74 75 76 77 78 79 80 81 82 83 def position ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve position information. Args: None. Returns: A pandas DataFrame containing the position data from the request. \"\"\" params = { 'acc_type' : 0 } return self . _query_pd ( '/trade/position/query' , params )","title":"position()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.position_virtual","text":"Sends a GET request to the OneQuant API to retrieve virtual position information. Returns: Type Description A pandas DataFrame containing the virtual position data from the request. Source code in onequant/api/trades.py 85 86 87 88 89 90 91 92 93 94 95 def position_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual position information. Args: None. Returns: A pandas DataFrame containing the virtual position data from the request. \"\"\" params = { 'acc_type' : 1 } return self . _query_pd ( '/trade/position/query' , params )","title":"position_virtual()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.rsptrades","text":"Sends a GET request to the OneQuant API to retrieve real-time settlement trade information. Returns: Type Description A pandas DataFrame containing the real-time settlement trade data from the request. Source code in onequant/api/trades.py 145 146 147 148 149 150 151 152 153 154 155 def rsptrades ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve real-time settlement trade information. Args: None. Returns: A pandas DataFrame containing the real-time settlement trade data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/rsptrade/query' , params )","title":"rsptrades()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.rsptrades_virtual","text":"Sends a GET request to the OneQuant API to retrieve virtual real-time settlement trade information. Returns: Type Description A pandas DataFrame containing the virtual real-time settlement trade data from the request. Source code in onequant/api/trades.py 157 158 159 160 161 162 163 164 165 166 167 def rsptrades_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual real-time settlement trade information. Args: None. Returns: A pandas DataFrame containing the virtual real-time settlement trade data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/rsptrade/query' , params )","title":"rsptrades_virtual()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.unfill_orders","text":"Sends a GET request to the OneQuant API to retrieve unfulfilled order information. Returns: Type Description A pandas DataFrame containing the unfulfilled order data from the request. Source code in onequant/api/trades.py 121 122 123 124 125 126 127 128 129 130 131 def unfill_orders ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve unfulfilled order information. Args: None. Returns: A pandas DataFrame containing the unfulfilled order data from the request. \"\"\" params = { 'is_virtual' : 0 } return self . _query_pd ( '/trade/order/restore/query' , params )","title":"unfill_orders()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.unfill_orders_virtual","text":"Sends a GET request to the OneQuant API to retrieve virtual unfulfilled order information. Returns: Type Description A pandas DataFrame containing the virtual unfulfilled order data from the request. Source code in onequant/api/trades.py 133 134 135 136 137 138 139 140 141 142 143 def unfill_orders_virtual ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve virtual unfulfilled order information. Args: None. Returns: A pandas DataFrame containing the virtual unfulfilled order data from the request. \"\"\" params = { 'is_virtual' : 1 } return self . _query_pd ( '/trade/order/restore/query' , params )","title":"unfill_orders_virtual()"},{"location":"api/api_trades/#onequant.api.trades.OqTrades.workers","text":"Sends a GET request to the OneQuant API to retrieve worker information. Returns: Type Description A pandas DataFrame containing the worker data from the request. Source code in onequant/api/trades.py 169 170 171 172 173 174 175 176 177 178 def workers ( self ): \"\"\"Sends a GET request to the OneQuant API to retrieve worker information. Args: None. Returns: A pandas DataFrame containing the worker data from the request. \"\"\" return self . _query_pd ( '/trade/worker/query' )","title":"workers()"},{"location":"api/api_wrapper/","text":"Decorator to convert the data returned by the API to a list. Parameters: Name Type Description Default func The function to be decorated required Returns: Type Description A wrapper function that converts the data to a list Source code in onequant/api/wrapper.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def tddata_2_list ( func ): \"\"\"Decorator to convert the data returned by the API to a list. Args: func: The function to be decorated Returns: A wrapper function that converts the data to a list \"\"\" def wrapper ( self , * args , ** kwargs ): data = func ( self , * args , ** kwargs ) if data is None or data [ 'data' ] is None : return None , 400 if data [ 'data' ][ 'code' ] != 0 : return None , data [ 'code' ] column_meta = data [ 'data' ][ 'column_meta' ] data_list = data [ 'data' ][ 'data' ] result = list ( map ( lambda row : { column_meta [ i ][ 0 ]: row [ i ] for i in range ( len ( column_meta ))}, data_list )) return result , data [ 'code' ] return wrapper Decorator to convert the data returned by the API to a pandas DataFrame. Parameters: Name Type Description Default func The function to be decorated required Returns: Type Description A wrapper function that converts the data to a pandas DataFrame Source code in onequant/api/wrapper.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def _pd ( func ): \"\"\"Decorator to convert the data returned by the API to a pandas DataFrame. Args: func: The function to be decorated Returns: A wrapper function that converts the data to a pandas DataFrame \"\"\" def convert ( self , * args , ** kwargs ): import pandas as pd data , code = func ( self , * args , ** kwargs ) if code != 200 : raise Exception ( f 'An error occurred while retrieving tdegine data! code is { code } ' ) return pd . DataFrame ( data ) return convert Decorator to handle pagination of API data. Parameters: Name Type Description Default func The function to be decorated required Returns: Type Description A wrapper function that handles pagination of API data Source code in onequant/api/wrapper.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def _pagination ( func ): \"\"\"Decorator to handle pagination of API data. Args: func: The function to be decorated Returns: A wrapper function that handles pagination of API data \"\"\" def wrapper ( self , * args , ** kwargs ): kwargs [ 'params' ][ 'current' ] = 1 kwargs [ 'params' ][ 'pageSize' ] = 10000 data = func ( self , * args , ** kwargs ) if 'total' in data and 'pageSize' in data : total = data [ 'total' ] page_size = data [ 'pageSize' ] num_pages = ( total + page_size - 1 ) // page_size for page in range ( 2 , num_pages + 1 ): if 'params' in kwargs : kwargs [ 'params' ][ 'current' ] = page kwargs [ 'params' ][ 'pageSize' ] = page_size page_data = func ( self , * args , ** kwargs ) if page_data [ 'code' ] != 200 : print ( f 'Error: { page } ' ) continue data [ 'data' ] . extend ( page_data [ 'data' ]) return data [ 'data' ], data [ 'code' ] return wrapper","title":"Api wrapper"},{"location":"datawash/preprocess_returns/","text":"Wash data for portfolio analyze. fill_date ( strategy_id = None , data = None , need_start = pd . Timestamp ( '2015-01-01' , tz = 'UTC' ), need_end = pd . Timestamp . now ( tz = 'UTC' ), time_column = 'ts' , netvalue_column = 'net_value' ) \u00b6 Fills missing dates in a pandas DataFrame with specified values. Parameters: Name Type Description Default strategy_id int The ID of the strategy. None data pandas . DataFrame The DataFrame to fill missing dates in. None need_start pandas . Timestamp The start date to fill missing dates from. pd.Timestamp('2015-01-01', tz='UTC') need_end pandas . Timestamp The end date to fill missing dates to. pd.Timestamp.now(tz='UTC') time_column str The name of the column containing the timestamps. 'ts' netvalue_column str The name of the column containing the net values. 'net_value' Returns: Type Description pandas.DataFrame: The DataFrame with missing dates filled in. Source code in onequant/data_wash/preprocess_returns.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def fill_date ( strategy_id = None , data = None , need_start = pd . Timestamp ( '2015-01-01' , tz = 'UTC' ), need_end = pd . Timestamp . now ( tz = 'UTC' ), time_column = 'ts' , netvalue_column = 'net_value' , ): \"\"\"Fills missing dates in a pandas DataFrame with specified values. Args: strategy_id (int): The ID of the strategy. data (pandas.DataFrame): The DataFrame to fill missing dates in. need_start (pandas.Timestamp): The start date to fill missing dates from. need_end (pandas.Timestamp): The end date to fill missing dates to. time_column (str): The name of the column containing the timestamps. netvalue_column (str): The name of the column containing the net values. Returns: pandas.DataFrame: The DataFrame with missing dates filled in. \"\"\" def _fill_date ( data , start , end , fill_data , is_pre = False , freq = None ): \"\"\"Fills missing dates in a pandas DataFrame with specified values. Args: data (pandas.DataFrame): The DataFrame to fill missing dates in. start (pandas.Timestamp): The start date to fill missing dates from. end (pandas.Timestamp): The end date to fill missing dates to. fill_data (int): The value to fill missing data with. is_pre (bool): Whether the missing dates are before the start date. Returns: pandas.DataFrame: The DataFrame with missing dates filled in. \"\"\" missing_dates = pd . date_range ( start = start , end = end , freq = freq ) missing_data = pd . DataFrame () missing_data [ time_column ] = missing_dates missing_data [ netvalue_column ] = fill_data missing_data . set_index ( time_column , inplace = True ) missing_data . index = missing_data . index . tz_localize ( None ) . floor ( 'D' ) data = pd . concat ([ missing_data , data ] if is_pre else [ data , missing_data ], ignore_index = False ) data . ffill () return data bday_cn = pd . offsets . CustomBusinessDay ( weekmask = 'Mon Tue Wed Thu Fri' ) data_start = data . index [ 0 ] . tz_localize ( 'UTC' ) data_end = data . index [ - 1 ] . tz_localize ( 'UTC' ) if data_start > need_start : data_start = data_start - pd . Timedelta ( '1 days' ) data = _fill_date ( data , need_start , data_start , 1 , is_pre = True , freq = bday_cn ) if data_end < need_end : data_end = data_end + pd . Timedelta ( '1 days' ) data = _fill_date ( data , data_end , need_end , data [ netvalue_column ] . iloc [ - 1 ], is_pre = False , freq = bday_cn ) # create boolean mask bday_list = pd . date_range ( start = data . index [ 0 ], end = data . index [ - 1 ], freq = bday_cn ) mask = ~ data . index . isin ( bday_list ) # use mask to select rows to delete data = data . loc [ ~ mask ] return data filter_returns_by_corr ( corr , cutoff = 0.9 , exact = None ) \u00b6 This function is the Python implementation of the R function findCorrelation() . Relies on numpy and pandas, so must have them pre-installed. It searches through a correlation matrix and returns a list of column names to remove to reduce pairwise correlations. For the documentation of the R function, see https://www.rdocumentation.org/packages/caret/topics/findCorrelation and for the source code of findCorrelation() , see https://github.com/topepo/caret/blob/master/pkg/caret/R/findCorrelation.R pandas dataframe. A correlation matrix as a pandas dataframe. float, default: 0.9. A numeric value for the pairwise absolute correlation cutoff bool, default: None A boolean value that determines whether the average correlations be recomputed at each step list of column names \u00b6 Example: \u00b6 R1 = pd.DataFrame({ 'x1': [1.0, 0.86, 0.56, 0.32, 0.85], 'x2': [0.86, 1.0, 0.01, 0.74, 0.32], 'x3': [0.56, 0.01, 1.0, 0.65, 0.91], 'x4': [0.32, 0.74, 0.65, 1.0, 0.36], 'x5': [0.85, 0.32, 0.91, 0.36, 1.0] }, index=['x1', 'x2', 'x3', 'x4', 'x5']) findCorrelation(R1, cutoff=0.6, exact=False) # ['x4', 'x5', 'x1', 'x3'] findCorrelation(R1, cutoff=0.6, exact=True) # ['x1', 'x5', 'x4'] Source code in onequant/data_wash/preprocess_returns.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def filter_returns_by_corr ( corr , cutoff = 0.9 , exact = None ): \"\"\"This function is the Python implementation of the R function `findCorrelation()`. Relies on numpy and pandas, so must have them pre-installed. It searches through a correlation matrix and returns a list of column names to remove to reduce pairwise correlations. For the documentation of the R function, see https://www.rdocumentation.org/packages/caret/topics/findCorrelation and for the source code of `findCorrelation()`, see https://github.com/topepo/caret/blob/master/pkg/caret/R/findCorrelation.R ----------------------------------------------------------------------------- Parameters: ----------- corr: pandas dataframe. A correlation matrix as a pandas dataframe. cutoff: float, default: 0.9. A numeric value for the pairwise absolute correlation cutoff exact: bool, default: None A boolean value that determines whether the average correlations be recomputed at each step ----------------------------------------------------------------------------- Returns: -------- list of column names ----------------------------------------------------------------------------- Example: -------- R1 = pd.DataFrame({ 'x1': [1.0, 0.86, 0.56, 0.32, 0.85], 'x2': [0.86, 1.0, 0.01, 0.74, 0.32], 'x3': [0.56, 0.01, 1.0, 0.65, 0.91], 'x4': [0.32, 0.74, 0.65, 1.0, 0.36], 'x5': [0.85, 0.32, 0.91, 0.36, 1.0] }, index=['x1', 'x2', 'x3', 'x4', 'x5']) findCorrelation(R1, cutoff=0.6, exact=False) # ['x4', 'x5', 'x1', 'x3'] findCorrelation(R1, cutoff=0.6, exact=True) # ['x1', 'x5', 'x4'] \"\"\" def _findCorrelation_fast ( corr , avg , cutoff ): combsAboveCutoff = corr . where ( lambda x : ( np . tril ( x ) == 0 ) & ( x > cutoff )) . stack () . index rowsToCheck = combsAboveCutoff . get_level_values ( 0 ) colsToCheck = combsAboveCutoff . get_level_values ( 1 ) msk = avg [ colsToCheck ] > avg [ rowsToCheck ] . values deletecol = pd . unique ( np . r_ [ colsToCheck [ msk ], rowsToCheck [ ~ msk ]]) . tolist () return deletecol def _findCorrelation_exact ( corr , avg , cutoff ): x = corr . loc [( * [ avg . sort_values ( ascending = False ) . index ] * 2 ,)] if ( x . dtypes . values [:, None ] == [ 'int64' , 'int32' , 'int16' , 'int8' ]) . any (): x = x . astype ( float ) x . values [( * [ np . arange ( len ( x ))] * 2 ,)] = np . nan deletecol = [] for ix , i in enumerate ( x . columns [: - 1 ]): for j in x . columns [ ix + 1 :]: if x . loc [ i , j ] > cutoff : if x [ i ] . mean () > np . nanmean ( x . drop ( j )): deletecol . append ( i ) x . loc [ i ] = x [ i ] = np . nan else : deletecol . append ( j ) x . loc [ j ] = x [ j ] = np . nan return deletecol if not np . allclose ( corr , corr . T ) or any ( corr . columns != corr . index ): raise ValueError ( \"correlation matrix is not symmetric.\" ) acorr = corr . abs () avg = acorr . mean () if exact or exact is None and corr . shape [ 1 ] < 100 : return _findCorrelation_exact ( acorr , avg , cutoff ) else : return _findCorrelation_fast ( acorr , avg , cutoff ) filter_returns_by_weights ( returns , weights , min_weights = 0.005 ) \u00b6 This function filters the returns by weights. pandas dataframe. Type Description A dataframe containing the returns. pandas dataframe. A dataframe containing the weights. float, default: 0.005. The minimum weight. pandas dataframe. A dataframe containing the cumulative return. Source code in onequant/data_wash/preprocess_returns.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def filter_returns_by_weights ( returns , weights , min_weights = 0.005 ): \"\"\"This function filters the returns by weights. Parameters: ----------- returns: pandas dataframe. A dataframe containing the returns. weights: pandas dataframe. A dataframe containing the weights. min_weights: float, default: 0.005. The minimum weight. Returns: -------- cumulative_return: pandas dataframe. A dataframe containing the cumulative return. \"\"\" selected_weights = weights . loc [ weights [ 'weights' ] > min_weights ] selected_returns = returns [ selected_weights . index ] weighted_return = selected_returns . mul ( selected_weights [ 'weights' ]) portfolio_return = weighted_return . sum ( axis = 1 ) cumulative_return = ( 1 + portfolio_return ) . cumprod () - 1 return cumulative_return","title":"Preprocess returns"},{"location":"datawash/preprocess_returns/#onequant.data_wash.preprocess_returns.fill_date","text":"Fills missing dates in a pandas DataFrame with specified values. Parameters: Name Type Description Default strategy_id int The ID of the strategy. None data pandas . DataFrame The DataFrame to fill missing dates in. None need_start pandas . Timestamp The start date to fill missing dates from. pd.Timestamp('2015-01-01', tz='UTC') need_end pandas . Timestamp The end date to fill missing dates to. pd.Timestamp.now(tz='UTC') time_column str The name of the column containing the timestamps. 'ts' netvalue_column str The name of the column containing the net values. 'net_value' Returns: Type Description pandas.DataFrame: The DataFrame with missing dates filled in. Source code in onequant/data_wash/preprocess_returns.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def fill_date ( strategy_id = None , data = None , need_start = pd . Timestamp ( '2015-01-01' , tz = 'UTC' ), need_end = pd . Timestamp . now ( tz = 'UTC' ), time_column = 'ts' , netvalue_column = 'net_value' , ): \"\"\"Fills missing dates in a pandas DataFrame with specified values. Args: strategy_id (int): The ID of the strategy. data (pandas.DataFrame): The DataFrame to fill missing dates in. need_start (pandas.Timestamp): The start date to fill missing dates from. need_end (pandas.Timestamp): The end date to fill missing dates to. time_column (str): The name of the column containing the timestamps. netvalue_column (str): The name of the column containing the net values. Returns: pandas.DataFrame: The DataFrame with missing dates filled in. \"\"\" def _fill_date ( data , start , end , fill_data , is_pre = False , freq = None ): \"\"\"Fills missing dates in a pandas DataFrame with specified values. Args: data (pandas.DataFrame): The DataFrame to fill missing dates in. start (pandas.Timestamp): The start date to fill missing dates from. end (pandas.Timestamp): The end date to fill missing dates to. fill_data (int): The value to fill missing data with. is_pre (bool): Whether the missing dates are before the start date. Returns: pandas.DataFrame: The DataFrame with missing dates filled in. \"\"\" missing_dates = pd . date_range ( start = start , end = end , freq = freq ) missing_data = pd . DataFrame () missing_data [ time_column ] = missing_dates missing_data [ netvalue_column ] = fill_data missing_data . set_index ( time_column , inplace = True ) missing_data . index = missing_data . index . tz_localize ( None ) . floor ( 'D' ) data = pd . concat ([ missing_data , data ] if is_pre else [ data , missing_data ], ignore_index = False ) data . ffill () return data bday_cn = pd . offsets . CustomBusinessDay ( weekmask = 'Mon Tue Wed Thu Fri' ) data_start = data . index [ 0 ] . tz_localize ( 'UTC' ) data_end = data . index [ - 1 ] . tz_localize ( 'UTC' ) if data_start > need_start : data_start = data_start - pd . Timedelta ( '1 days' ) data = _fill_date ( data , need_start , data_start , 1 , is_pre = True , freq = bday_cn ) if data_end < need_end : data_end = data_end + pd . Timedelta ( '1 days' ) data = _fill_date ( data , data_end , need_end , data [ netvalue_column ] . iloc [ - 1 ], is_pre = False , freq = bday_cn ) # create boolean mask bday_list = pd . date_range ( start = data . index [ 0 ], end = data . index [ - 1 ], freq = bday_cn ) mask = ~ data . index . isin ( bday_list ) # use mask to select rows to delete data = data . loc [ ~ mask ] return data","title":"fill_date()"},{"location":"datawash/preprocess_returns/#onequant.data_wash.preprocess_returns.filter_returns_by_corr","text":"This function is the Python implementation of the R function findCorrelation() . Relies on numpy and pandas, so must have them pre-installed. It searches through a correlation matrix and returns a list of column names to remove to reduce pairwise correlations. For the documentation of the R function, see https://www.rdocumentation.org/packages/caret/topics/findCorrelation and for the source code of findCorrelation() , see https://github.com/topepo/caret/blob/master/pkg/caret/R/findCorrelation.R pandas dataframe. A correlation matrix as a pandas dataframe. float, default: 0.9. A numeric value for the pairwise absolute correlation cutoff bool, default: None A boolean value that determines whether the average correlations be recomputed at each step","title":"filter_returns_by_corr()"},{"location":"datawash/preprocess_returns/#onequant.data_wash.preprocess_returns.filter_returns_by_corr--list-of-column-names","text":"","title":"list of column names"},{"location":"datawash/preprocess_returns/#onequant.data_wash.preprocess_returns.filter_returns_by_corr--example","text":"R1 = pd.DataFrame({ 'x1': [1.0, 0.86, 0.56, 0.32, 0.85], 'x2': [0.86, 1.0, 0.01, 0.74, 0.32], 'x3': [0.56, 0.01, 1.0, 0.65, 0.91], 'x4': [0.32, 0.74, 0.65, 1.0, 0.36], 'x5': [0.85, 0.32, 0.91, 0.36, 1.0] }, index=['x1', 'x2', 'x3', 'x4', 'x5']) findCorrelation(R1, cutoff=0.6, exact=False) # ['x4', 'x5', 'x1', 'x3'] findCorrelation(R1, cutoff=0.6, exact=True) # ['x1', 'x5', 'x4'] Source code in onequant/data_wash/preprocess_returns.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def filter_returns_by_corr ( corr , cutoff = 0.9 , exact = None ): \"\"\"This function is the Python implementation of the R function `findCorrelation()`. Relies on numpy and pandas, so must have them pre-installed. It searches through a correlation matrix and returns a list of column names to remove to reduce pairwise correlations. For the documentation of the R function, see https://www.rdocumentation.org/packages/caret/topics/findCorrelation and for the source code of `findCorrelation()`, see https://github.com/topepo/caret/blob/master/pkg/caret/R/findCorrelation.R ----------------------------------------------------------------------------- Parameters: ----------- corr: pandas dataframe. A correlation matrix as a pandas dataframe. cutoff: float, default: 0.9. A numeric value for the pairwise absolute correlation cutoff exact: bool, default: None A boolean value that determines whether the average correlations be recomputed at each step ----------------------------------------------------------------------------- Returns: -------- list of column names ----------------------------------------------------------------------------- Example: -------- R1 = pd.DataFrame({ 'x1': [1.0, 0.86, 0.56, 0.32, 0.85], 'x2': [0.86, 1.0, 0.01, 0.74, 0.32], 'x3': [0.56, 0.01, 1.0, 0.65, 0.91], 'x4': [0.32, 0.74, 0.65, 1.0, 0.36], 'x5': [0.85, 0.32, 0.91, 0.36, 1.0] }, index=['x1', 'x2', 'x3', 'x4', 'x5']) findCorrelation(R1, cutoff=0.6, exact=False) # ['x4', 'x5', 'x1', 'x3'] findCorrelation(R1, cutoff=0.6, exact=True) # ['x1', 'x5', 'x4'] \"\"\" def _findCorrelation_fast ( corr , avg , cutoff ): combsAboveCutoff = corr . where ( lambda x : ( np . tril ( x ) == 0 ) & ( x > cutoff )) . stack () . index rowsToCheck = combsAboveCutoff . get_level_values ( 0 ) colsToCheck = combsAboveCutoff . get_level_values ( 1 ) msk = avg [ colsToCheck ] > avg [ rowsToCheck ] . values deletecol = pd . unique ( np . r_ [ colsToCheck [ msk ], rowsToCheck [ ~ msk ]]) . tolist () return deletecol def _findCorrelation_exact ( corr , avg , cutoff ): x = corr . loc [( * [ avg . sort_values ( ascending = False ) . index ] * 2 ,)] if ( x . dtypes . values [:, None ] == [ 'int64' , 'int32' , 'int16' , 'int8' ]) . any (): x = x . astype ( float ) x . values [( * [ np . arange ( len ( x ))] * 2 ,)] = np . nan deletecol = [] for ix , i in enumerate ( x . columns [: - 1 ]): for j in x . columns [ ix + 1 :]: if x . loc [ i , j ] > cutoff : if x [ i ] . mean () > np . nanmean ( x . drop ( j )): deletecol . append ( i ) x . loc [ i ] = x [ i ] = np . nan else : deletecol . append ( j ) x . loc [ j ] = x [ j ] = np . nan return deletecol if not np . allclose ( corr , corr . T ) or any ( corr . columns != corr . index ): raise ValueError ( \"correlation matrix is not symmetric.\" ) acorr = corr . abs () avg = acorr . mean () if exact or exact is None and corr . shape [ 1 ] < 100 : return _findCorrelation_exact ( acorr , avg , cutoff ) else : return _findCorrelation_fast ( acorr , avg , cutoff )","title":"Example:"},{"location":"datawash/preprocess_returns/#onequant.data_wash.preprocess_returns.filter_returns_by_weights","text":"This function filters the returns by weights. pandas dataframe. Type Description A dataframe containing the returns. pandas dataframe. A dataframe containing the weights. float, default: 0.005. The minimum weight. pandas dataframe. A dataframe containing the cumulative return. Source code in onequant/data_wash/preprocess_returns.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def filter_returns_by_weights ( returns , weights , min_weights = 0.005 ): \"\"\"This function filters the returns by weights. Parameters: ----------- returns: pandas dataframe. A dataframe containing the returns. weights: pandas dataframe. A dataframe containing the weights. min_weights: float, default: 0.005. The minimum weight. Returns: -------- cumulative_return: pandas dataframe. A dataframe containing the cumulative return. \"\"\" selected_weights = weights . loc [ weights [ 'weights' ] > min_weights ] selected_returns = returns [ selected_weights . index ] weighted_return = selected_returns . mul ( selected_weights [ 'weights' ]) portfolio_return = weighted_return . sum ( axis = 1 ) cumulative_return = ( 1 + portfolio_return ) . cumprod () - 1 return cumulative_return","title":"filter_returns_by_weights()"},{"location":"portfolio/portfolio/","text":"Fetch reports and returns for strategies. get_filter_reports ( wrapper = None , strategy = None , base_ea = None , test_codes = None , base_tf = None , min_tf = None , min_netvalue = None , min_sharpe = None , min_annual_returns = None , min_calmar = None , min_sortino = None , max_margin = None , min_tradetimes = None ) \u00b6 This function retrieves the reports and OqStrategies object for a given set of parameters. ApiWrapper object, default: None. An object of the ApiWrapper class. str, default: None. The strategy ID. str, default: None. The base EA. list, default: None. A list of test codes. int, default: None. The base time frame. int, default: None. The minimum time frame. float, default: None. The minimum net value. float, default: None. The minimum Sharpe ratio. float, default: None. The minimum annual returns. float, default: None. The minimum Calmar ratio. float, default: None. The minimum Sortino ratio. float, default: None. The maximum margin. int, default: None. The minimum number of trades. pandas dataframe. A dataframe containing the reports. OqStrategies object. An object of the OqStrategies class. Source code in onequant/portfolio/strategy_folio.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def get_filter_reports ( wrapper = None , strategy = None , base_ea = None , test_codes = None , base_tf = None , min_tf = None , min_netvalue = None , min_sharpe = None , min_annual_returns = None , min_calmar = None , min_sortino = None , max_margin = None , min_tradetimes = None , ): \"\"\"This function retrieves the reports and OqStrategies object for a given set of parameters. Parameters: ----------- wrapper: ApiWrapper object, default: None. An object of the ApiWrapper class. strategy: str, default: None. The strategy ID. base_ea: str, default: None. The base EA. test_codes: list, default: None. A list of test codes. base_tf: int, default: None. The base time frame. min_tf: int, default: None. The minimum time frame. min_netvalue: float, default: None. The minimum net value. min_sharpe: float, default: None. The minimum Sharpe ratio. min_annual_returns: float, default: None. The minimum annual returns. min_calmar: float, default: None. The minimum Calmar ratio. min_sortino: float, default: None. The minimum Sortino ratio. max_margin: float, default: None. The maximum margin. min_tradetimes: int, default: None. The minimum number of trades. Returns: -------- reports: pandas dataframe. A dataframe containing the reports. oqs: OqStrategies object. An object of the OqStrategies class. \"\"\" oqs = OqStrategies ( wrapper = wrapper ) reports = oqs . strategy_report ( strategy , base_ea , test_codes , base_tf , min_tf , min_netvalue , min_sharpe , min_annual_returns , min_calmar , min_sortino , max_margin , min_tradetimes , ) return reports , oqs get_strategy_filter_corr ( returns = None , max_corr = 0.9 ) \u00b6 This function filters the returns dataframe by correlation. pandas dataframe, default: None. Type Description A dataframe containing the returns. float, default: 0.9. The maximum correlation value. pandas dataframe. A dataframe containing the filtered returns. Source code in onequant/portfolio/strategy_folio.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def get_strategy_filter_corr ( returns = None , max_corr = 0.9 ): \"\"\"This function filters the returns dataframe by correlation. Parameters: ----------- returns: pandas dataframe, default: None. A dataframe containing the returns. max_corr: float, default: 0.9. The maximum correlation value. Returns: -------- trimmed_df: pandas dataframe. A dataframe containing the filtered returns. \"\"\" corr_matrix = returns . corr () returns_by_corr = filter_returns_by_corr ( corr_matrix , cutoff = max_corr ) trimmed_df = returns . drop ( columns = returns_by_corr ) trimmed_df = trimmed_df . fillna ( 0 ) return trimmed_df get_strategy_returns ( oqs , strategy_list , fill_start_date = pd . Timestamp ( '2015-01-01' , tz = 'UTC' ), fill_end_date = pd . Timestamp . now ( tz = 'UTC' ), data_returns = True ) \u00b6 This function retrieves the returns for a given strategy ID. OqStrategies object. An object of the OqStrategies class. list. A list of strategy IDs. pandas.Timestamp. Filled start date. pandas.Timestamp. Filled end date. bool. False if use assets,True if use returns. pandas dataframe. A dataframe containing the returns. Source code in onequant/portfolio/strategy_folio.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def get_strategy_returns ( oqs , strategy_list , fill_start_date = pd . Timestamp ( '2015-01-01' , tz = 'UTC' ), fill_end_date = pd . Timestamp . now ( tz = 'UTC' ), data_returns = True , ): \"\"\"This function retrieves the returns for a given strategy ID. Parameters: ----------- oqs: OqStrategies object. An object of the OqStrategies class. strategy_list: list. A list of strategy IDs. fill_start_date: pandas.Timestamp. Filled start date. fill_end_date: pandas.Timestamp. Filled end date. data_returns: bool. False if use assets,True if use returns. Returns: -------- returns_df: pandas dataframe. A dataframe containing the returns. \"\"\" def get_returns ( id ): try : data = oqs . strategy_netvalue ( id ) data [ 'ts' ] = pd . to_datetime ( data [ 'ts' ]) data . set_index ( 'ts' , inplace = True ) # Set hours and minutes to zero data . index = data . index . tz_localize ( None ) . floor ( 'D' ) data = data [ ~ data . index . duplicated ()] data = data . resample ( 'D' ) . ffill () data = fill_date ( strategy_id = id , data = data , need_start = fill_start_date , need_end = fill_end_date ) data = data . rename ( columns = { 'net_value' : id }) if data_returns : data [ id ] = data [ id ] . pct_change () data = data . dropna () return data except Exception as e : print ( f ' { id } get returns error { e } ' ) return None dfs = [] pool = ThreadPoolExecutor () for res in pool . map ( get_returns , strategy_list ): if res is not None : dfs . append ( res ) returns_df = pd . concat ( dfs , axis = 1 ) return returns_df","title":"Portfolio"},{"location":"portfolio/portfolio/#onequant.portfolio.strategy_folio.get_filter_reports","text":"This function retrieves the reports and OqStrategies object for a given set of parameters. ApiWrapper object, default: None. An object of the ApiWrapper class. str, default: None. The strategy ID. str, default: None. The base EA. list, default: None. A list of test codes. int, default: None. The base time frame. int, default: None. The minimum time frame. float, default: None. The minimum net value. float, default: None. The minimum Sharpe ratio. float, default: None. The minimum annual returns. float, default: None. The minimum Calmar ratio. float, default: None. The minimum Sortino ratio. float, default: None. The maximum margin. int, default: None. The minimum number of trades. pandas dataframe. A dataframe containing the reports. OqStrategies object. An object of the OqStrategies class. Source code in onequant/portfolio/strategy_folio.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def get_filter_reports ( wrapper = None , strategy = None , base_ea = None , test_codes = None , base_tf = None , min_tf = None , min_netvalue = None , min_sharpe = None , min_annual_returns = None , min_calmar = None , min_sortino = None , max_margin = None , min_tradetimes = None , ): \"\"\"This function retrieves the reports and OqStrategies object for a given set of parameters. Parameters: ----------- wrapper: ApiWrapper object, default: None. An object of the ApiWrapper class. strategy: str, default: None. The strategy ID. base_ea: str, default: None. The base EA. test_codes: list, default: None. A list of test codes. base_tf: int, default: None. The base time frame. min_tf: int, default: None. The minimum time frame. min_netvalue: float, default: None. The minimum net value. min_sharpe: float, default: None. The minimum Sharpe ratio. min_annual_returns: float, default: None. The minimum annual returns. min_calmar: float, default: None. The minimum Calmar ratio. min_sortino: float, default: None. The minimum Sortino ratio. max_margin: float, default: None. The maximum margin. min_tradetimes: int, default: None. The minimum number of trades. Returns: -------- reports: pandas dataframe. A dataframe containing the reports. oqs: OqStrategies object. An object of the OqStrategies class. \"\"\" oqs = OqStrategies ( wrapper = wrapper ) reports = oqs . strategy_report ( strategy , base_ea , test_codes , base_tf , min_tf , min_netvalue , min_sharpe , min_annual_returns , min_calmar , min_sortino , max_margin , min_tradetimes , ) return reports , oqs","title":"get_filter_reports()"},{"location":"portfolio/portfolio/#onequant.portfolio.strategy_folio.get_strategy_filter_corr","text":"This function filters the returns dataframe by correlation. pandas dataframe, default: None. Type Description A dataframe containing the returns. float, default: 0.9. The maximum correlation value. pandas dataframe. A dataframe containing the filtered returns. Source code in onequant/portfolio/strategy_folio.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def get_strategy_filter_corr ( returns = None , max_corr = 0.9 ): \"\"\"This function filters the returns dataframe by correlation. Parameters: ----------- returns: pandas dataframe, default: None. A dataframe containing the returns. max_corr: float, default: 0.9. The maximum correlation value. Returns: -------- trimmed_df: pandas dataframe. A dataframe containing the filtered returns. \"\"\" corr_matrix = returns . corr () returns_by_corr = filter_returns_by_corr ( corr_matrix , cutoff = max_corr ) trimmed_df = returns . drop ( columns = returns_by_corr ) trimmed_df = trimmed_df . fillna ( 0 ) return trimmed_df","title":"get_strategy_filter_corr()"},{"location":"portfolio/portfolio/#onequant.portfolio.strategy_folio.get_strategy_returns","text":"This function retrieves the returns for a given strategy ID. OqStrategies object. An object of the OqStrategies class. list. A list of strategy IDs. pandas.Timestamp. Filled start date. pandas.Timestamp. Filled end date. bool. False if use assets,True if use returns. pandas dataframe. A dataframe containing the returns. Source code in onequant/portfolio/strategy_folio.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def get_strategy_returns ( oqs , strategy_list , fill_start_date = pd . Timestamp ( '2015-01-01' , tz = 'UTC' ), fill_end_date = pd . Timestamp . now ( tz = 'UTC' ), data_returns = True , ): \"\"\"This function retrieves the returns for a given strategy ID. Parameters: ----------- oqs: OqStrategies object. An object of the OqStrategies class. strategy_list: list. A list of strategy IDs. fill_start_date: pandas.Timestamp. Filled start date. fill_end_date: pandas.Timestamp. Filled end date. data_returns: bool. False if use assets,True if use returns. Returns: -------- returns_df: pandas dataframe. A dataframe containing the returns. \"\"\" def get_returns ( id ): try : data = oqs . strategy_netvalue ( id ) data [ 'ts' ] = pd . to_datetime ( data [ 'ts' ]) data . set_index ( 'ts' , inplace = True ) # Set hours and minutes to zero data . index = data . index . tz_localize ( None ) . floor ( 'D' ) data = data [ ~ data . index . duplicated ()] data = data . resample ( 'D' ) . ffill () data = fill_date ( strategy_id = id , data = data , need_start = fill_start_date , need_end = fill_end_date ) data = data . rename ( columns = { 'net_value' : id }) if data_returns : data [ id ] = data [ id ] . pct_change () data = data . dropna () return data except Exception as e : print ( f ' { id } get returns error { e } ' ) return None dfs = [] pool = ThreadPoolExecutor () for res in pool . map ( get_returns , strategy_list ): if res is not None : dfs . append ( res ) returns_df = pd . concat ( dfs , axis = 1 ) return returns_df","title":"get_strategy_returns()"},{"location":"util/datetime/","text":"Module for datetime utility functions. OqDateTime \u00b6 This class provides methods to convert timestamps to strings and vice versa. Source code in onequant/util/datetime.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class OqDateTime : \"\"\"This class provides methods to convert timestamps to strings and vice versa.\"\"\" @staticmethod def timestamp_to_string ( timestamp ): \"\"\"Converts a timestamp to a string in the format 'YYYY-MM-DD HH:MM:SS'. Args: timestamp (int): The timestamp to convert. Returns: str: The formatted date and time string. \"\"\" return datetime . datetime . fromtimestamp ( timestamp ) . strftime ( '%Y-%m- %d %H:%M:%S' ) @staticmethod def string_to_timestamp ( date_string ): \"\"\"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp. Args: date_string (str): The date and time string to convert. Returns: int: The timestamp. \"\"\" if len ( date_string ) == 10 : date_string += ' 00:00:00' elif len ( date_string ) == 8 : date_string = date_string [: 4 ] + '-' + date_string [ 4 : 6 ] + '-' + date_string [ 6 :] + ' 00:00:00' return int ( datetime . datetime . strptime ( date_string , '%Y-%m- %d %H:%M:%S' ) . timestamp ()) @staticmethod def string_to_ms_timestamp ( date_string ): \"\"\"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp in milliseconds. Args: date_string (str): The date and time string to convert. Returns: int: The timestamp in milliseconds. \"\"\" if len ( date_string ) == 10 : date_string += ' 00:00:00' elif len ( date_string ) == 8 : date_string = date_string [: 4 ] + '-' + date_string [ 4 : 6 ] + '-' + date_string [ 6 :] + ' 00:00:00' return int ( datetime . datetime . strptime ( date_string , '%Y-%m- %d %H:%M:%S' ) . timestamp () * 1000 ) string_to_ms_timestamp ( date_string ) staticmethod \u00b6 Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp in milliseconds. Parameters: Name Type Description Default date_string str The date and time string to convert. required Returns: Name Type Description int The timestamp in milliseconds. Source code in onequant/util/datetime.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @staticmethod def string_to_ms_timestamp ( date_string ): \"\"\"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp in milliseconds. Args: date_string (str): The date and time string to convert. Returns: int: The timestamp in milliseconds. \"\"\" if len ( date_string ) == 10 : date_string += ' 00:00:00' elif len ( date_string ) == 8 : date_string = date_string [: 4 ] + '-' + date_string [ 4 : 6 ] + '-' + date_string [ 6 :] + ' 00:00:00' return int ( datetime . datetime . strptime ( date_string , '%Y-%m- %d %H:%M:%S' ) . timestamp () * 1000 ) string_to_timestamp ( date_string ) staticmethod \u00b6 Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp. Parameters: Name Type Description Default date_string str The date and time string to convert. required Returns: Name Type Description int The timestamp. Source code in onequant/util/datetime.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 @staticmethod def string_to_timestamp ( date_string ): \"\"\"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp. Args: date_string (str): The date and time string to convert. Returns: int: The timestamp. \"\"\" if len ( date_string ) == 10 : date_string += ' 00:00:00' elif len ( date_string ) == 8 : date_string = date_string [: 4 ] + '-' + date_string [ 4 : 6 ] + '-' + date_string [ 6 :] + ' 00:00:00' return int ( datetime . datetime . strptime ( date_string , '%Y-%m- %d %H:%M:%S' ) . timestamp ()) timestamp_to_string ( timestamp ) staticmethod \u00b6 Converts a timestamp to a string in the format 'YYYY-MM-DD HH:MM:SS'. Parameters: Name Type Description Default timestamp int The timestamp to convert. required Returns: Name Type Description str The formatted date and time string. Source code in onequant/util/datetime.py 9 10 11 12 13 14 15 16 17 18 19 @staticmethod def timestamp_to_string ( timestamp ): \"\"\"Converts a timestamp to a string in the format 'YYYY-MM-DD HH:MM:SS'. Args: timestamp (int): The timestamp to convert. Returns: str: The formatted date and time string. \"\"\" return datetime . datetime . fromtimestamp ( timestamp ) . strftime ( '%Y-%m- %d %H:%M:%S' )","title":"Datetime"},{"location":"util/datetime/#onequant.util.datetime.OqDateTime","text":"This class provides methods to convert timestamps to strings and vice versa. Source code in onequant/util/datetime.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class OqDateTime : \"\"\"This class provides methods to convert timestamps to strings and vice versa.\"\"\" @staticmethod def timestamp_to_string ( timestamp ): \"\"\"Converts a timestamp to a string in the format 'YYYY-MM-DD HH:MM:SS'. Args: timestamp (int): The timestamp to convert. Returns: str: The formatted date and time string. \"\"\" return datetime . datetime . fromtimestamp ( timestamp ) . strftime ( '%Y-%m- %d %H:%M:%S' ) @staticmethod def string_to_timestamp ( date_string ): \"\"\"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp. Args: date_string (str): The date and time string to convert. Returns: int: The timestamp. \"\"\" if len ( date_string ) == 10 : date_string += ' 00:00:00' elif len ( date_string ) == 8 : date_string = date_string [: 4 ] + '-' + date_string [ 4 : 6 ] + '-' + date_string [ 6 :] + ' 00:00:00' return int ( datetime . datetime . strptime ( date_string , '%Y-%m- %d %H:%M:%S' ) . timestamp ()) @staticmethod def string_to_ms_timestamp ( date_string ): \"\"\"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp in milliseconds. Args: date_string (str): The date and time string to convert. Returns: int: The timestamp in milliseconds. \"\"\" if len ( date_string ) == 10 : date_string += ' 00:00:00' elif len ( date_string ) == 8 : date_string = date_string [: 4 ] + '-' + date_string [ 4 : 6 ] + '-' + date_string [ 6 :] + ' 00:00:00' return int ( datetime . datetime . strptime ( date_string , '%Y-%m- %d %H:%M:%S' ) . timestamp () * 1000 )","title":"OqDateTime"},{"location":"util/datetime/#onequant.util.datetime.OqDateTime.string_to_ms_timestamp","text":"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp in milliseconds. Parameters: Name Type Description Default date_string str The date and time string to convert. required Returns: Name Type Description int The timestamp in milliseconds. Source code in onequant/util/datetime.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @staticmethod def string_to_ms_timestamp ( date_string ): \"\"\"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp in milliseconds. Args: date_string (str): The date and time string to convert. Returns: int: The timestamp in milliseconds. \"\"\" if len ( date_string ) == 10 : date_string += ' 00:00:00' elif len ( date_string ) == 8 : date_string = date_string [: 4 ] + '-' + date_string [ 4 : 6 ] + '-' + date_string [ 6 :] + ' 00:00:00' return int ( datetime . datetime . strptime ( date_string , '%Y-%m- %d %H:%M:%S' ) . timestamp () * 1000 )","title":"string_to_ms_timestamp()"},{"location":"util/datetime/#onequant.util.datetime.OqDateTime.string_to_timestamp","text":"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp. Parameters: Name Type Description Default date_string str The date and time string to convert. required Returns: Name Type Description int The timestamp. Source code in onequant/util/datetime.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 @staticmethod def string_to_timestamp ( date_string ): \"\"\"Converts a date and time string in the format 'YYYY-MM-DD HH:MM:SS' to a timestamp. Args: date_string (str): The date and time string to convert. Returns: int: The timestamp. \"\"\" if len ( date_string ) == 10 : date_string += ' 00:00:00' elif len ( date_string ) == 8 : date_string = date_string [: 4 ] + '-' + date_string [ 4 : 6 ] + '-' + date_string [ 6 :] + ' 00:00:00' return int ( datetime . datetime . strptime ( date_string , '%Y-%m- %d %H:%M:%S' ) . timestamp ())","title":"string_to_timestamp()"},{"location":"util/datetime/#onequant.util.datetime.OqDateTime.timestamp_to_string","text":"Converts a timestamp to a string in the format 'YYYY-MM-DD HH:MM:SS'. Parameters: Name Type Description Default timestamp int The timestamp to convert. required Returns: Name Type Description str The formatted date and time string. Source code in onequant/util/datetime.py 9 10 11 12 13 14 15 16 17 18 19 @staticmethod def timestamp_to_string ( timestamp ): \"\"\"Converts a timestamp to a string in the format 'YYYY-MM-DD HH:MM:SS'. Args: timestamp (int): The timestamp to convert. Returns: str: The formatted date and time string. \"\"\" return datetime . datetime . fromtimestamp ( timestamp ) . strftime ( '%Y-%m- %d %H:%M:%S' )","title":"timestamp_to_string()"}]}